---
# Most of the information for this role comes from:
#   https://rudd-o.com/linux-and-free-software/installing-fedora-on-top-of-zfs
- name: 'Identify the rpm distribution'
  shell: rpm -E %dist
  args:
    warn: no
  register: rpm_dist

- name: 'Install repo details for zfs'
  dnf:
    name: 'http://download.zfsonlinux.org/fedora/zfs-release{{ rpm_dist.stdout }}.noarch.rpm'
    disable_gpg_check: yes

- name: 'Install zfs package'
  dnf: 
    name: 'kernel-devel, zfs, libselinux-python, rpm-build, expect'

- name: 'Check if zfs module will load during reboot'
  stat: 
    path: /etc/modules-load.d/zfs.conf
  register: zfs_module_loading
  no_log: true

- name: 'Load zfs module during first setup'
  modprobe:
    name: zfs
    state: present
  when: zfs_module_loading.stat.exists == False

- name: 'Ensure zfs module is loaded during boot sequence'
  blockinfile:
    path: /etc/modules-load.d/zfs.conf
    create: yes
    block: |
      # Load zfs kernel module
      zfs

- name: 'clone repo containing grub-zfs-fixer rpm source'
  git:
     repo: '{{ repo_url }}'
     dest: '{{ repo_dir }}'

- name: 'Create SRPM grub-zfs-fixer.tar.gz file'
  archive:
    path: '{{ repo_dir }}/grub-zfs-fixer'
    dest: '{{ common_target_dir }}/grub-zfs-fixer.tar.gz'
    
- name: 'Create the RPM from grub-zfs-fixer.tar.gz'
  shell: 'rpmbuild -ta {{ common_target_dir }}/grub-zfs-fixer.tar.gz'

- name: 'Find location of RPM'
  find:
    paths: '/root/rpmbuild/RPMS/noarch'
    patterns: 'grub-zfs-fixer*'
  register: rpm_path_find

- name: 'Install the RPM created from grub-zfs-fixer.tar.gz'
  dnf: 
    name: '{{ rpm_path_find.files[0].path }}'
    state: present

- name: 'Load metadata about partition on /dev/sda'
  parted:
    device: /dev/sda
    unit: MiB
  register: sda_parted_info

- name: 'Partition 5 (/dev/sda5) must be mounted as root'
  shell: mount | grep '/dev/sda5 on / '
  no_log: true

- name: 'Find count of zpools called pool'
  shell: zpool list | grep ^pool | wc -l
  register: zpool_list_count
  
- name: 'Create an inital pool to work with'
  shell: zpool create pool -m none -o ashift=12 /dev/sda4
  when: zpool_list_count.stdout == '0'
  
- name: 'Find count of pool/ROOT/fedora/home filesystem'
  shell: zfs list | grep pool/ROOT/fedora/home | wc -l 
  register: zfs_list_count
  
- name: 'Create an inital filesystem for fedora'
  shell: zfs create -p pool/ROOT/fedora/{{ item }}
  with_items:
    - home
    - var
  when: zfs_list_count.stdout == '0'

- name: 'Turn compression on for zfs pool'
  shell: zfs set compression=on pool
  
- name: 'Disable Access Time recording for zfs pool to improve responsiveness'
  shell: zfs set atime=off pool

- name: 'Allow acl properties to be applied during rsync'
  shell: zfs set aclinherit=passthrough pool

- name: 'Is zpool located under /sysroot'
  shell: zpool list | grep ^pool.*/sysroot$ | wc -l
  register: zpool_sysroot_count
  
- name: 'Export zfs pool to allow mountpoint to be modified'
  shell: zpool export pool
  when: zpool_sysroot_count.stdout == '0'

- name: 'Import zfs pool under /sysroot '
  shell: zpool import -o altroot=/sysroot pool
  when: zpool_sysroot_count.stdout == '0'

- name: 'Is zfs filesystem mounted under /sysroot'
  shell: zfs list | grep ^pool/ROOT/fedora.*/sysroot$ | wc -l
  register: zfs_sysroot_count
  
- name: 'Set the mountpoint for zfs root filesystem'
  shell: zfs set mountpoint=/ pool/ROOT/fedora
  when: zfs_sysroot_count.stdout == '0'

- name: 'Copy the existing fs into /sysroot'
  shell: rsync --exclude=/sys -axvHASX / /sysroot/

- name: 'Bind mount /dev into chroot /sysroot/dev'
  shell: |
    if mountpoint /sysroot/dev ; then
      echo "/sysroot/dev already mounted"
    else
      mount --bind /dev /sysroot/dev
      if ! mountpoint /sysroot/dev ; then
        echo "Failed to mount /sysroot/dev"
        exit 1
      else
        echo "SUCCESS"
      fi
    fi
  register: mount_var
  chenged_when: mount_dev.stdout == "SUCCESS"

- name: 'Create /proc mount in chroot'
  shell: 
    cmd: |
      chroot /sysroot /bin/bash <<HEREDOC
        if mountpoint /proc ; then
          echo "/proc already mounted"
        else
          mount -t proc none /proc
          echo "/proc mounted"
          if ! mountpoint /proc ; then
            echo "Failed to mount /proc"
            exit 1
          else
            echo "SUCCESS"
          fi
        fi
      HEREDOC
  register: mount_var
  chenged_when: mount_dev.stdout == "SUCCESS"
  
- name: 'Create /sys mount in chroot'
  shell: 
    cmd: |
      chroot /sysroot /bin/bash <<HEREDOC
        if mountpoint /sys ; then
          echo "/sys already mounted"
        else
          mount -t sysfs none /sys
          echo "/sys mounted"
          if ! mountpoint /sys ; then
            echo "Failed to mount /sys"
            exit 1
          else
            echo "SUCCESS"
          fi
        fi
      HEREDOC
  register: mount_var
  chenged_when: mount_dev.stdout == "SUCCESS"
  
- name: 'Create /boot mount in chroot using fstab entry'
  shell: 
    cmd: |
      chroot /sysroot /bin/bash <<HEREDOC
        if mountpoint /boot ; then
          echo "/boot already mounted"
        else
          mount /boot
          echo "/boot mounted"
          if ! mountpoint /boot ; then
            echo "Failed to mount /boot"
            exit 1
          else
            echo "SUCCESS"
          fi
        fi
      HEREDOC
  register: mount_var
  chenged_when: mount_dev.stdout == "SUCCESS"

- name: 'Fix /etc/fstab to use zfs filesystem as /'
  lineinfile: 
    path: /etc/fstab
    regexp: '[^ ]+[ ]+/[ ]+[a-zA-Z0-9]+[ ]+[a-zA-Z0-9]+([ ]+.*)'
    line: 'pool/ROOT/fedora   /   zfs   noatime\1'
    backrefs: true

- name: Checking /etc/fstab has been updated
  lineinfile: 
    dest: /etc/fstab
    regexp: "^.*pool/ROOT/fedora.*$"
    line: "REPLACED STRING INDICATES SUCCESS"
  check_mode: yes
  register: presence
  failed_when: not presence.changed

- name: 'Rebuild /boot/grub2/grub.cfg in chroot to use zfs filesystem'
  shell: 
    cmd: |
      chroot /sysroot /bin/bash <<HEREDOC
        if grep "root=ZFS=pool/ROOT/fedora" /boot/grub2/grub.cfg ; then
          echo "/boot/grub2/grub.cfg already configured"
        else
          /usr/sbin/grub2-mkconfig | tee /boot/grub2/grub.cfg
          echo "/boot/grub2/grub.cfg configured for ZFS"
        fi
        if ! grep "root=ZFS=pool/ROOT/fedora" /boot/grub2/grub.cfg ; then
          echo "Failed to configure boot/grub2/grub.cfg"
          exit 1
        fi
      HEREDOC


- name: 'Recreate the initram image'
  shell: 
    cmd: |
      chroot /sysroot /bin/bash <<HEREDOC
        rm -f /boot/initramfs-`uname -r`.img
        dracut -fv --kver `uname -r`
        if [[ -e /boot/initramfs-`uname -r`.img ]]; then
          echo "SUCCESS"
        else
          echo "FAIL"
          exit 1
        fi
      HEREDOC
  register: initram_var
  chenged_when: initram_dev.stdout == "SUCCESS"

- name: 'Unmount all of the scaffolding mounts in chroot'
  shell: 
    cmd: |
      chroot /sysroot /bin/bash <<HEREDOC
        if ! mountpoint {{ item }}; then
          echo "{{ item }} already unmounted"
        else
          umount {{ item }}
          echo "{{ item }} unmounted"
          if mountpoint {{ item }}; then
            echo "Failed to unmount {{ item }}"
            exit 1
          else
            echo "SUCCESS"
          fi
        fi
      HEREDOC
  register: unmount_var
  chenged_when: unmount_dev.stdout == "SUCCESS"
  with_items:
    - '/boot'
    - '/sys'
    - '/proc'
    - '/dev'


- name: 'Export the zfs pool one last time'
  shell: zpool export pool

