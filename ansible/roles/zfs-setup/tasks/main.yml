---
# Most of the information for this role comes from:
#   https://www.csparks.com/BootFedoraZFS/index.md

- name: 'Identify the rpm distribution'
  shell: rpm -E %dist
  args:
    warn: no
  register: rpm_dist
  changed_when: false

- name: 'Install repo details for zfs'
  dnf:
    name: 'http://download.zfsonlinux.org/fedora/zfs-release{{ rpm_dist.stdout }}.noarch.rpm'
    disable_gpg_check: yes

- name: Install additional package dependencies
  dnf:
    name: libselinux-python, grub2-efi-x64-modules, gdisk, kernel-devel, zfs, zfs-dracut
 
- name: upgrade all packages
  dnf:
    name: "*"
    state: latest

- name: Running and latest installed kernel must match
  shell: |
    installedKernel=$( ls -1 /boot/vmlinuz-* | grep x86_64 | sort | head -1 | sed "s:/boot/vmlinuz-::" )
    runningKernel=$( uname -r )
    if [[ "${installedKernel}" != "${runningKernel}" ]]; then
      echo "UPDATED KERNEL REQUIRES REBOOT!"
      exit 1
    fi
  changed_when: false

- name: Set SELinux to permissive in current session
  shell: setenforce 0

- name: Set SELinux to permissive after reboot
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=permissive'
    
- name: Are EFI packages installed?
  shell: rpm -qa | grep grub2-efi
  args:
    warn: no
  register: rpm_list
  changed_when: false

- name: Fail if system not configured to use EFI
  fail:
    msg: "System should be using EFI"
  when: rpm_list.stdout_lines|length == 0
  changed_when: false

- name: Copy zmogrify onto system
  copy:
    src: "{{ role_path }}/files/zmogrify"
    dest: /usr/local/sbin/
    mode: u=rwx,g=rx,o=rx

- name: Copy zenter onto system
  copy:
    src: "{{ role_path }}/files/zenter"
    dest: /usr/local/sbin/
    mode: u=rwx,g=rx,o=rx

- name: 
  lineinfile:
    path: /etc/default/grub
    regexp: '{{ item.name }}'
    line: '{{ item.name }}={{ item.value  }}'
  with_items:
    - { name: 'GRUB_PRELOAD_MODULES', value:   '\"zfs\"' }
    - { name: 'GRUB_DISABLE_OS_PROBER', value: 'true'    }

- name: 'Ensure zfs module is loaded during boot sequence'
  blockinfile:
    path: /etc/profile.d/grub2_zpool_fix.sh
    create: yes
    block: |
      export ZPOOL_VDEV_NAME_PATH=YES

- name: Kernel upgrades should trigger zfs driver rebuild 
  file:
    src: "/usr/local/sbin/zmogrify"
    dest: "/etc/kernel/postinst.d/zmogrify"
    state: link

- name: 'Check if zfs module will load during reboot'
  stat:
    path: /etc/modules-load.d/zfs.conf
  register: zfs_module_loading
  no_log: true
  changed_when: false

- name: 'Load zfs module for this session'
  modprobe:
    name: zfs
    state: present
  when: zfs_module_loading.stat.exists == False

- name: 'Ensure zfs module is loaded during boot sequence'
  blockinfile:
    path: /etc/modules-load.d/zfs.conf
    create: yes
    block: |
      # Load zfs kernel module
      zfs

- name: Disable the import cache as it can cause problems as zfs pool changes
  service:
    name: zfs-import-cache
    enabled: no

- name: Enable the import-scan to scan devices 
  service:
    name: zfs-import-scan
    enabled: yes

- name: Delete unused zfs cache file
  file:
    state: absent
    path: "/etc/zfs/zpool.cache"

- name: rebuild the initramfs excluding the zpool cache
  shell: dracut -fv --kver `uname -r`

- name: Get partition data
  parted: 
    device: '{{ target_device }}'
    unit: 'MiB'
  register: parted_data
  changed_when: false

- name: Check that disk has no partitions before assigning some
  vars:  
    msg_string: |
      # Clean target device 
      sudo zfs umount /sysroot && sudo zpool destroy -f pool && sudo sgdisk -Z {{ target_device }}'
  fail:
    msg: "{{ msg_string.split('\n')[:-1] }}"
  when: parted_data.partitions|length != 0
  changed_when: false

- name: 'Create bootable zfs drive on {{ target_device }}'
  shell: |
    # Zap the disk
    sgdisk -Z {{ target_device }}
    
    # Create an efi boot partition
    sgdisk -n 1:0:+200M -t 1:ef00 -c 1:"efi_boot"  {{ target_device }}

    # Ensure the boot partition is GPT    
    sgdisk -g {{ target_device }}1

    # Create a zpool partition on the rest of the disk
    sgdisk -n 2:0:0 -t 2:8300 -c 2:"zfs_pool" {{ target_device }} 

    # inform the OS of partition table changes
    partprobe /dev/sdb
  
- name: 'Formatting efi boot drive on {{ target_device }}'
  shell: mkfs.fat -F32 {{ target_device }}1

- name: Create a zpool on zpool_disk
  shell: |
    # Create a zpool called pool on partition 2 
    # aligned to 2^12 (2048) sectors
    zpool create pool -m none {{ target_device }}2 -o ashift=12
    zfs set compression=on pool
    zfs set atime=off pool

    # Create a dataset on zpool called pool
    zfs create -p pool/ROOT/fedora-28
    # Store extended data directly in inodes
    zfs set xattr=sa pool/ROOT/fedora-28

    #zpool status pool | grep /dev/disk/by- | xargs | cut -d' ' -f1 Allows copying fedora OS journal files 
    zfs set acltype=posixacl pool/ROOT/fedora-28

    # export/import the zpool on an alternative directory
    # This gives flexability of what will be mounted on /
    zpool export pool
    zpool import pool -d /dev/disk/by-id -o altroot=/sysroot

    # Mount fedora dataset onto /sysroot/
    zfs set mountpoint=/ pool/ROOT/fedora-28
  
- name: Copy the installed fedora from local drive to the zfs mount
  shell: rsync --exclude=/proc/* --exclude=/sys/* --exclude=/dev/*  -avxHASX / /sysroot/

- name: Initialise Boot files on efi_boot partition
  shell: | 
    
    # Copy local /boot/efi files onto zfs  boot partition
    cd ~
    mkdir efi_mount
    mount {{ target_device }}1 efi_mount
    cp -a /boot/efi/* efi_mount
    umount efi_mount
    rmdir efi_mount

    # Remove old GPT entry for build hdd
    efibootmgr -d {{ target_device }} -v -b 4 -B

    # Create a new boot entry in GPT 
    efibootmgr -d {{ target_device }} -v -c -l /EFI/fedora/shimx64.efi -L Fedora28

    # Ensure the boot partition auto mounts onto /boot/efi at startup
    BLK_ID=$( blkid {{ target_device }}1  -o value | head -1 )
    echo "UUID=${BLK_ID}  /boot/efi  vfat  umask=0077,shortname=winnt 0 2" > /sysroot/etc/fstab

- name: Allow Fedora:28+ to boot into zfs
  shell: |
    DISK_ID=$( zpool status pool | grep /dev/disk/by- | xargs | cut -d' ' -f1 )
    echo "GRUB_DEVICE_BOOT=${DISK_ID}" >> /sysroot/etc/default/grub

- name: Setup the /sysroot as zfs boot system
  shell:  zenter /sysroot <<< zmogrify

- name: Check that boot partition has been set correctly
  shell: |
    BOOT_PARTITION_ID=$(  blkid -o value {{ target_device }}1 | tail -1 )
    if ! efibootmgr -v -d {{ target_device }} | grep ${BOOT_PARTITION_ID}; then
      echo "Boot disk missing: ${BOOT_PARTITION_ID}"
      exit 1
    fi
  changed_when: false

- name: Reboot to ZFS goodness
  debug:
    msg: "All configuration has been done."
  changed_when: false
