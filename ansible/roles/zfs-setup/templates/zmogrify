#!/bin/bash -e
# zmogrify - Run dracut and configure grub to boot with root on zfs.

mount_boot_efi() {
  # Mount efi boot partition using entry in /etc/fstab
  if mount | grep "/boot/efi"; then
    # Probably a development oversight
    #  make sure we mount from /etc/fstab
    umount /boot/efi
  fi
  mount /boot/efi

  # Make sure we unmount it - even if there are errors
  trap umount_boot_efi EXIT
}

umount_boot_efi() {
  # Finished with efi parition
  umount /boot/efi
}

setup_boot_efi() {
  # After an update, but before a reboot, the running 
  # kernel version can be older than the installed kernel version
  local installedKernel=$(ls -1 /boot/vmlinuz*x86_64 | sort | head -1 | cut -d'-' -f2-)
  local runningKernel=$(uname -r)
  local zver 

  if [[ -z "${installedKernel}" ]] || [[ -z "${runningKernel}" ]]; then
    echo "Unable to find Kernel Versions:"
    echo "    installedKernel=${installedKernel}"
    echo "      runningKernel=${runningKernel}"
    exit 1
  fi

  # Kernel mismatch requires zfs and spl to be rebuilt
  if [[ "${installedKernel}" != "${runningKernel}" ]]; then
    # zfs and spl modules need rebuilt
    zver=$(rpm -q zfs | cut -d'-' -f2)
    if [[ -z "${zver}" ]] || "${zver}" ~= [0-9\.]+ ; then
      echo "Invalid zfs version extracted from rpm: ${zver}"
      exit 1
    fi 
    dkms install -m spl -v ${zver} -k ${installedKernel}
    dkms install -m zfs -v ${zver} -k ${installedKernel}

  fi 

  # Recreate the initramfs for the new kernel
  # set -x: verbose output
  # set -e: fail on non-zero rc
  sh -x -e -c "/usr/bin/dracut -fv --kver ${installedKernel}"

  if ! [[ -e /boot/initramfs-${installedKernel}.img ]]; then
    echo "Missing file: /boot/initramfs-${installedKernel}.img"
    exit 1
  fi
  
  if ! (lsinitrd -k ${installedKernel} | grep "zfs.ko"); then
    echo "Installed initramfs doesnt contain zfs.ko"
    exit 1
  fi

  # Need the /boot/efi mounted for whats next
  mount_boot_efi

  # Copy any updated zfs grub modules into efi boot partition
  mkdir -p /boot/efi/EFI/{{ ansible_distribution|lower }}/x86_64-efi
  cp -a /usr/lib/grub/x86_64-efi/* /boot/efi/EFI/{{ ansible_distribution|lower }}/x86_64-efi

  # Rebuild the grub config
  grub2-mkconfig -o /boot/efi/EFI/{{ ansible_distribution|lower }}/grub.cfg

  # Set grub boot menu item 0 as the default
  grubby --set-default-index 0

  if ! grep "${installedKernel}" /boot/efi/EFI/{{ ansible_distribution|lower }}/grub.cfg; then
    echo "Installed Kernel not mentioned in grub.cfg"
    exit 1
  fi

  # grub has problems booting to /boot on a zfs partition
  # Copy the /boot files onto the /boot/efi partition
  # grub.cfg menu is updated to look for the 
  # kernel and initrd files on /boot/efi/boot
  rsync -a --no-links --delete --exclude=efi /boot /boot/efi/

  # fat32 filesystem doesnt support symbolic links; just copy it
  # \cp means ignore any alias e.g. cp -i which would prompt for replace
  \cp -u /boot/efi/EFI/{{ ansible_distribution|lower }}/grubenv /boot/efi/boot/grub2/

  # SYS_EXIT will trigger trap to call umount_boot_efi()
}

setup_boot_efi

